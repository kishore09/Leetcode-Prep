class Solution {

    public TreeNode lowestCommonAncestor(TreeNode root,TreeNode p,TreeNode q) {
        if (p.val > root.val && q.val > root.val) 
            return lowestCommonAncestor(root.right,p,q);
        if (p.val < root.val && q.val < root.val) 
            return lowestCommonAncestor(root.left,p,q);
        return root;
    }
}




// If the Tree is not sorted or BST

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null){
            return null;
        }
   
        if(root.val==p.val||root.val==q.val){
            return root;
        }
        TreeNode leftlca=lowestCommonAncestor(root.left,p,q);
        TreeNode rightlca=lowestCommonAncestor(root.right,p,q);
        if(rightlca==null){
            return leftlca;
        }
        if(leftlca==null){
            return rightlca;
        }
        return root;
    }
}