public boolean isPalindrome(String s) {

    // You should also ignore all non alpha numeric char

    int i = 0;
    int j = s.length() - 1;
    while (i < j) {
        
        Character start = s.charAt(i);
        Character end = s.charAt(j);
        
        // continue will loop backe to the while but break will exit from while
        if (!Character.isLetterOrDigit(start)) {
            i++;
            continue;
        }
        
        if (!Character.isLetterOrDigit(end)) {
            j--;
            continue;
        }
        
        if (Character.toLowerCase(start) != Character.toLowerCase(end)) {
            return false;
        }
        
        i++;
        j--;    
    }
    
    return true;
}



// - - - - - - - - -
// -   TC: O(n)    -
// -   SC: O(1)    -
// - - - - - - - - -


// - - - - - - - Other Ways - - - - - - - - 


public class PalindromeString {
    public static void main(String[] args) {
        String s = "racecar";

        // Method 1: Using a loop to compare characters from both ends of the string

        // USE THE PREV VERSION OF CODE 

        // Method 2: Using a StringBuilder to reverse the string and compare with the original string
        StringBuilder sb = new StringBuilder(s);
        sb.reverse();
        if (s.equals(sb.toString())) {
            System.out.println(s + " is a palindrome (using StringBuilder method)");
        } else {
            System.out.println(s + " is not a palindrome (using StringBuilder method)");
        }

        // Method 3: Using recursion to compare characters from both ends of the string
        public static boolean isPalindromeRecursive(String s) {
            if (s.length() == 0 || s.length() == 1) {
                return true;
            }
            if (s.charAt(0) == s.charAt(s.length() - 1)) {
                return isPalindromeRecursive(s.substring(1, s.length() - 1));
            }
            return false;
        }
    }

}

