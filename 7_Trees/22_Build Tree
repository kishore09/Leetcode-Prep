public class BinaryTree {

    public static class Node {
        int data;
        Node left;
        Node right;

        Node(int data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }

    public static class BinaryTreetwo {
        int i = -1;

        // Building Nodes
        public Node BuildTree(int nodes[]) {
            i++;
            // -1 is null node
            if (nodes[i] == -1) {
                return null;
            }

            Node newNode = new Node(nodes[i]);
            newNode.left = BuildTree(nodes);
            newNode.right = BuildTree(nodes);

            return newNode;
        }

        // Pre Order Traversal (Root -> Left -> Right)
        public void PreOrder(Node root) {
            if (root == null) {
                System.out.print("-1 ");
                return;
            }

            System.out.print(root.data + " ");
            PreOrder(root.left);
            PreOrder(root.right);
        }

        // In Order Traversal (Left -> Root -> Right)
        public void InOrder(Node root) {
            if (root == null) {
                System.out.print("-1 ");
                return;
            }

            InOrder(root.left);
            System.out.print(root.data + " ");
            InOrder(root.right);
        }

        // Post Order Traversal (Left -> Right -> Root)
        public void PostOrder(Node root) {
            if (root == null) {
                System.out.print("-1 ");
                return;
            }

            PostOrder(root.left);
            PostOrder(root.right);
            System.out.print(root.data + " ");
        }


    }

    public static void main(String[] args) {
        int nodes[] = {1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1};
        BinaryTreetwo tree = new BinaryTreetwo();
        Node root = tree.BuildTree(nodes);
        System.out.println("Root is: " + root.data);
        tree.PreOrder(root);
        System.out.println(" ");
        tree.InOrder(root);
        System.out.println(" ");
        tree.PostOrder(root);
    }
}
